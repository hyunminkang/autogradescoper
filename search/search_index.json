{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to autogradescoper documentation","text":"<p>This is the documentation for the <code>autogradescoper</code> toolkit. </p>"},{"location":"#what-is-autogradescoper","title":"What is autogradescoper?","text":"<p><code>autogradescoper</code> is a software package that help instructors to  create autograded programming assignments for students using Gradescope. Currently, <code>autogradescoper</code> supports a specific type of R programming assignments. </p>"},{"location":"#how-is-autogradescoper-different-from-other-related-tools","title":"How is autogradescoper different from other related tools?","text":"<p>There are other tools that help instructors to create autograded programming assignments using Gradescope. The Gradescoper Autograder Documentation provides a language-agnostic guide to creating autograded programming assignments for Gradescope. Several generic examples were provided for Python and Java. However, there is no specific example for R programming assignments.</p> <p>The gradeR package is a tool that helps instructors to create autograded R programming assignments for Gradescope. However, the <code>gradeR</code> package is not sufficient enough to create an autograder for Gradescope. It requires additional setup from a user who very well understand how Gradescope autograding system works.</p> <p>The <code>autogradescoper</code> toolkit is designed for instructors who want to create autograded R programming assignments for Gradescope without the need to completely understand the Gradescope autograding system.  The instructors can follow the step-by-step guide provided in this documentation to create autograded R programming assignments for Gradescope.</p>"},{"location":"#future-of-autogradescoper","title":"Future of autogradescoper","text":"<p>Currently, <code>autogradescoper</code> supports a specific type of R programming assignments.  Future developments may allow us to support other programming languages or assignment types.  Please visit the Development section if you are interested in contributing to this repository.</p>"},{"location":"development/","title":"Contributing to the Development of autogradescoper","text":"<p>TBD</p>"},{"location":"quickstart/","title":"Quickstart for autogradescoper","text":""},{"location":"quickstart/#overview","title":"Overview","text":"<p>To use <code>autogradscoper</code> for your course, you do not have to install the software on your local machine. However, you need to have a valid account that allows to to create a programming assignment in Gradescope. Please see the List of Schools that supports single-sign-on (SSO) with Gradescope.</p> <p>Here, we will use a prepared example to autograde a R programming assignment that reproduces <code>pexp()</code> function in R only using the <code>base</code> package. Here are basic steps to get started with the example.</p> <ol> <li>Create an account or Log in Gradescope.</li> <li>Create a course in Gradescope.</li> <li>Create a programming assignment in Gradescope.</li> <li>Upload your Autograder file.</li> <li>Test your Autograder file.</li> <li>Release the programming assignments to students.</li> </ol>"},{"location":"quickstart/#create-an-account-or-log-in-to-gradescope","title":"Create an account or Log in to Gradescope","text":"<p>Please visit Gradescope Login Page to create an account or log in. Most likely,  instructors will have to use their school email address to create an account or sign in.</p>"},{"location":"quickstart/#create-a-course-in-gradescope","title":"Create a course in Gradescope","text":"<p>You can create a new course by selecting \"+Create Course\" button from the dashboard as shown below.</p> <p></p>"},{"location":"quickstart/#create-a-programming-assignment-in-gradescope","title":"Create a programming assignment in Gradescope","text":"<p>You can create a new programming assignment by selecting \"Create Assignment\" button from the  course dashboard. When selecting Assignment Type, select \"Programming Assignment\" as shown below.</p> <p></p> <p>Next, specify the Assignment Settings by providing an Assignment Name, Total Points (use 10 in this example), Release Date, and Due Date as shown below.</p> <p></p>"},{"location":"quickstart/#download-the-example-autograder-file","title":"Download the Example Autograder file","text":"<p>You can download the example autograder file from the following available at the GitHub repository. </p> <p>You may click the following link to download the autograder file (5.6 KB) directly to your local computer.</p> <p>To understand the details of the example autograder file, please see the Use Cases section for the detailed explanation.</p>"},{"location":"quickstart/#upload-your-autograder-file","title":"Upload your Autograder file","text":"<p>After downloading the autograder file, you can upload the file to the Gradescope to set up the autograder for the programming assignment as shown in the following screenshot.</p> <p></p> <p>Note that it will typically take a few minutes to build the autograder from the uploaded file.  If the autograder is successfully built,  under the \"Docker Image Status\" section, you can see \"built as of (Date and time)\" message.</p>"},{"location":"quickstart/#test-your-autograder","title":"Test your Autograder","text":"<p>You can test the autograder file by selecting \"Test Autograder\" link after the build is completed, which will shown the following screenshot to allow you to upload a test submission.</p> <p></p> <p>There are three example answers you can download and submit at the GitHub repository. All files are named as <code>mypexp.R</code>. You can drag and drop the downloaded file to submit a file for testing.</p> <p>For example, if you submit the correct answer under <code>v1_correct/mypexp.R</code>, you will see the following screenshot, showing that the test is passed with the full score.</p> <p></p> <p>If you finished until this step, you are ready to set up your own programming assignments for students. Please see Use Cases section for the detailed explanation of how to prepare your own Autograder for your class.</p>"},{"location":"full/args/","title":"Full Documentation : Introduction","text":"<p>TBD</p>"},{"location":"full/config/","title":"Full Documentation : Configuration Files","text":"<p>TBD</p>"},{"location":"full/install/","title":"Full Documentation : Installation","text":"<p>TBD</p>"},{"location":"full/intro/","title":"Use Case : Creating a New Assignment","text":"<p>TBD</p>"},{"location":"full/preload/","title":"Full Documentation : Preload Scripts","text":"<p>TBD</p>"},{"location":"use_cases/example_assignment/","title":"Use Case : Example Assignment","text":""},{"location":"use_cases/example_assignment/#overview","title":"Overview","text":"<p>This section describes the autogradescoper example assignment available in GitHub repository in detail.  If you are interested in running the example assignment without understanding the details first, please see the Quickstart section.</p>"},{"location":"use_cases/example_assignment/#the-assignment-specification","title":"The Assignment : Specification","text":"<p>The objective of this example assignment is to reimplement  the cumulative density function (CDF) of the expoential distribution from scratch. </p> <p>Let \\(x\\) and \\(\\lambda\\) be positive real values. We want to evaluate the following quantity:</p> \\[\\Pr(X \\leq x) = 1 - \\exp(-\\lambda x)\\] <p>where \\(X\\) is a random variable following the exponential distribution with rate parameter \\(\\lambda\\). The key requirement is to implement the function robustly against possible numerical precision issues.</p> <p>More specifically, the students are expected to write a function <code>mypexp(x, rate, lower.tail, log.p)</code> that reproduces the <code>pexp()</code> function in R only using the <code>base</code> package, where</p> <ul> <li><code>x</code> : a positive real number (scalar), representing \\(x\\) in the equation above.</li> <li><code>rate</code> : a positive rate number (scalar), representing \\(\\lambda\\) in the equation above.</li> <li><code>lower.tail</code> : a logical value (scalar), indicating whether to return \\(\\Pr(X \\leq x)\\) (<code>TRUE</code>) or \\(\\Pr(X &gt; x)\\) (<code>FALSE</code>).</li> <li><code>log.p</code> : a logical value (scalar), indicating whether to return the natural logarithm of the probability density function (<code>TRUE</code>) or the probability density function itself (<code>FALSE</code>).</li> </ul> <p>The students are expected to implement the function <code>mypexp()</code> in a file named <code>mypexp.R</code> and submit it to the autograder. It is important to maintain the precision of the output up to 8 digits, and it is allowed to use the <code>pexp()</code> function or any other functions outside the <code>base</code> package in the implementation. </p>"},{"location":"use_cases/example_assignment/#the-assignment-a-sample-solution","title":"The Assignment : A Sample Solution","text":"<p>Below is an example solution that implements the <code>mypexp()</code> function in R.</p> <pre><code>mypexp &lt;- function(x, rate, lower.tail, log.p) {\n  if ( lower.tail ) { ## if lower.tail is TRUE\n    if ( log.p ) {    ## if log.p is TRUE    \n       if ( x*rate &gt; 10 ) {      ## when x*rate is very large \n         return( -exp(-rate*x) ) ## use approximation: log(1-z) = -z, to avoid underflow\n       }\n       else {                            ## otherwise, \n         return( log(-expm1(-rate*x) ) ) ## use the exact formula\n      }\n    } else {          ## if log.p is FALSE\n       return( -expm1(-rate*x) ) ## use expm1() to avoid numerical issues\n    }\n  } else {                ## if lower.tail is FALSE\n    if ( log.p ) {        ## if log.p is TRUE\n       return( -rate*x )  ## the formula is simple\n    } else {              ## if log.p is FALSE\n       return( exp(-rate*x) ) ## the formula is still simple\n    }\n  }\n}\n</code></pre>"},{"location":"use_cases/example_assignment/#preparing-files-for-the-autograder","title":"Preparing Files for the Autograder","text":"<p>The autograder used by <code>autogradscoper</code> typically has the following structure of input files:</p> <pre><code>|-- setup.sh\n|-- run_autograder\n|-- config/\n| |-- config.yaml\n| |-- config.prob.yaml\n| `-- preload.baseonly.R\n|-- solution/\n| `-- [function_name].R \n`-- args/\n  |-- test.1.args\n  |-- test.2.args\n  |-- ...\n  `-- test.10.args\n</code></pre> <p>The <code>[function_name]</code> in this example is <code>mypexp</code>, because the students are expected to implement the <code>mypexp()</code> function in the <code>mypexp.R</code> file. </p> <p>These files can be found in the GitHub repository. We will explore the contents of each file one by one.</p>"},{"location":"use_cases/example_assignment/#setupsh","title":"setup.sh","text":"<p>The <code>setup.sh</code> file is a script that is used to build the Docker image for the autograder. It contains the commands to install necessary software tools and libraries based on a base image of Ubuntu 20.04. </p> <pre><code>#!/usr/bin/env bash\n\n## install python, R, git, and other necessary libraries.\napt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev\napt-get install -y python3 python3-pip python3-dev\napt-get install -y r-base\napt-get install -y git\n\n## create python virtual environment\npip3 install virtualenv\nvirtualenv /venv\nsource /venv/bin/activate\n\n## install autogradescoper from GitHub\ngit clone https://github.com/hyunminkang/autogradescoper.git\ncd autogradescoper\npip install -e .\n</code></pre>"},{"location":"use_cases/example_assignment/#run_autograder","title":"run_autograder","text":"<p>The <code>run_autograder</code> is a script that is used to run the autograder.  In <code>autogradescoper</code>, it simply runs the main <code>autogradescoper</code> command with specific arguments.  Everything else is handled by the configuration files and the input files.</p> <pre><code>#!/usr/bin/env bash\n\n## activate python virtual environment\nsource /venv/bin/activate\n\n## run autogradescoper\n## use --show-args and --show-details if you want to reveal input arguments and detailed output to students\nautogradescoper eval_r_func_probset --show-args --show-details --show-errors\n</code></pre> <p>(To be continued...)</p>"},{"location":"use_cases/new_assignment/","title":"Use Case : Creating a New Assignment","text":"<p>TBD</p>"}]}