{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to autogradescoper documentation","text":"<p>This is the documentation for the <code>autogradescoper</code> toolkit. </p>"},{"location":"#what-is-autogradescoper","title":"What is autogradescoper?","text":"<p><code>autogradescoper</code> is a software package that help instructors to  create autograded programming assignments for students using Gradescope. Currently, <code>autogradescoper</code> supports a specific type of R programming assignments. </p>"},{"location":"#how-is-autogradescoper-different-from-other-related-tools","title":"How is autogradescoper different from other related tools?","text":"<p>There are other tools that help instructors to create autograded programming assignments using Gradescope. The Gradescoper Autograder Documentation provides a language-agnostic guide to creating autograded programming assignments for Gradescope. Several generic examples were provided for Python and Java. However, there is no specific example for R programming assignments.</p> <p>The gradeR package is a tool that helps instructors to create autograded R programming assignments for Gradescope. However, the <code>gradeR</code> package is not sufficient enough to create an autograder for Gradescope. It requires additional setup from a user who very well understand how Gradescope autograding system works.</p> <p>The <code>autogradescoper</code> toolkit is designed for instructors who want to create autograded R programming assignments for Gradescope without the need to completely understand the Gradescope autograding system.  The instructors can follow the step-by-step guide provided in this documentation to create autograded R programming assignments for Gradescope.</p>"},{"location":"#future-of-autogradescoper","title":"Future of autogradescoper","text":"<p>Currently, <code>autogradescoper</code> supports a specific type of R programming assignments.  Future developments may allow us to support other programming languages or assignment types.  Please visit the Development section if you are interested in contributing to this repository.</p>"},{"location":"development/","title":"Contributing to the Development of autogradescoper","text":"<p>If you are interested in contributing to the development of autogradescoper, please contact Hyun Min Kang (hmkang@umich.edu). You may submit a pull request to the repository to suggest changes or additions to the codebase. </p>"},{"location":"quickstart/","title":"Quickstart for autogradescoper","text":""},{"location":"quickstart/#overview","title":"Overview","text":"<p>To use <code>autogradscoper</code> for your course, you do not have to install the software on your local machine. However, you need to have a valid account that allows to to create a programming assignment in Gradescope. Please see the List of Schools that supports single-sign-on (SSO) with Gradescope.</p> <p>Here, we will use a prepared example to autograde a R programming assignment that reproduces <code>pexp()</code> function in R only using the <code>base</code> package. Here are basic steps to get started with the example.</p> <ol> <li>Create an account or Log in Gradescope.</li> <li>Create a course in Gradescope.</li> <li>Create a programming assignment in Gradescope.</li> <li>Upload your Autograder file.</li> <li>Test your Autograder file.</li> <li>Release the programming assignments to students.</li> </ol>"},{"location":"quickstart/#create-an-account-or-log-in-to-gradescope","title":"Create an account or Log in to Gradescope","text":"<p>Please visit Gradescope Login Page to create an account or log in. Most likely,  instructors will have to use their school email address to create an account or sign in.</p>"},{"location":"quickstart/#create-a-course-in-gradescope","title":"Create a course in Gradescope","text":"<p>You can create a new course by selecting \"+Create Course\" button from the dashboard as shown below.</p> <p></p>"},{"location":"quickstart/#create-a-programming-assignment-in-gradescope","title":"Create a programming assignment in Gradescope","text":"<p>You can create a new programming assignment by selecting \"Create Assignment\" button from the  course dashboard. When selecting Assignment Type, select \"Programming Assignment\" as shown below.</p> <p></p> <p>Next, specify the Assignment Settings by providing an Assignment Name, Total Points (use 10 in this example), Release Date, and Due Date as shown below.</p> <p></p>"},{"location":"quickstart/#download-the-example-autograder-file","title":"Download the Example Autograder file","text":"<p>You can download the example autograder file from the following available at the GitHub repository. </p> <p>You may click the following link to download the autograder file (5.6 KB) directly to your local computer.</p> <p>To understand the details of the example autograder file, please see the Use Cases section for the detailed explanation.</p>"},{"location":"quickstart/#upload-your-autograder-file","title":"Upload your Autograder file","text":"<p>After downloading the autograder file, you can upload the file to the Gradescope to set up the autograder for the programming assignment as shown in the following screenshot.</p> <p></p> <p>Note that it will typically take a few minutes to build the autograder from the uploaded file.  If the autograder is successfully built,  under the \"Docker Image Status\" section, you can see \"built as of (Date and time)\" message.</p>"},{"location":"quickstart/#test-your-autograder","title":"Test your Autograder","text":"<p>You can test the autograder file by selecting \"Test Autograder\" link after the build is completed, which will shown the following screenshot to allow you to upload a test submission.</p> <p></p> <p>There are three example answers you can download and submit at the GitHub repository. All files are named as <code>mypexp.R</code>. You can drag and drop the downloaded file to submit a file for testing.</p> <p>For example, if you submit the correct answer under <code>v1_correct/mypexp.R</code>, you will see the following screenshot, showing that the test is passed with the full score.</p> <p></p> <p>If you finished until this step, you are ready to set up your own programming assignments for students. Please see Use Cases section for the detailed explanation of how to prepare your own Autograder for your class.</p>"},{"location":"full/args/","title":"Full Documentation : Introduction","text":"<p>TBD</p>"},{"location":"full/config/","title":"Full Documentation : Configuration Files","text":"<p>TBD</p>"},{"location":"full/install/","title":"Full Documentation : Installation","text":"<p>TBD</p>"},{"location":"full/intro/","title":"Use Case : Creating a New Assignment","text":"<p>TBD</p>"},{"location":"full/preload/","title":"Full Documentation : Preload Scripts","text":"<p>TBD</p>"},{"location":"use_cases/example_assignment/","title":"Use Case : Example Assignment","text":""},{"location":"use_cases/example_assignment/#overview","title":"Overview","text":"<p>This section describes the autogradescoper example assignment available in GitHub repository in detail.  If you are interested in running the example assignment without understanding the details first, please see the Quickstart section.</p> <p>The Gradescope Autograder Documentation provides a comprehensive overview of how to use Gradescope. This documentation will not repeat the documentation, but rather focus on the specific use case of using <code>autogradescoper</code>.</p>"},{"location":"use_cases/example_assignment/#the-assignment-specification","title":"The Assignment : Specification","text":"<p>The objective of this example assignment is to reimplement  the cumulative density function (CDF) of the expoential distribution from scratch. </p> <p>Let \\(x\\) and \\(\\lambda\\) be positive real values. We want to evaluate the following quantity:</p> \\[\\Pr(X \\leq x) = 1 - \\exp(-\\lambda x)\\] <p>where \\(X\\) is a random variable following the exponential distribution with rate parameter \\(\\lambda\\). The key requirement is to implement the function robustly against possible numerical precision issues.</p> <p>More specifically, the students are expected to write a function <code>mypexp(x, rate, lower.tail, log.p)</code> that reproduces the <code>pexp()</code> function in R only using the <code>base</code> package, where</p> <ul> <li><code>x</code> : a positive real number (scalar), representing \\(x\\) in the equation above.</li> <li><code>rate</code> : a positive rate number (scalar), representing \\(\\lambda\\) in the equation above.</li> <li><code>lower.tail</code> : a logical value (scalar), indicating whether to return \\(\\Pr(X \\leq x)\\) (<code>TRUE</code>) or \\(\\Pr(X &gt; x)\\) (<code>FALSE</code>).</li> <li><code>log.p</code> : a logical value (scalar), indicating whether to return the natural logarithm of the probability density function (<code>TRUE</code>) or the probability density function itself (<code>FALSE</code>).</li> </ul> <p>The students are expected to implement the function <code>mypexp()</code> in a file named <code>mypexp.R</code> and submit it to the autograder. It is important to maintain the precision of the output up to 8 digits, and it is allowed to use the <code>pexp()</code> function or any other functions outside the <code>base</code> package in the implementation. </p>"},{"location":"use_cases/example_assignment/#the-assignment-a-sample-solution","title":"The Assignment : A Sample Solution","text":"<p>Below is an example solution that implements the <code>mypexp()</code> function in R.</p> <pre><code>mypexp &lt;- function(x, rate, lower.tail, log.p) {\n  if ( lower.tail ) { ## if lower.tail is TRUE\n    if ( log.p ) {    ## if log.p is TRUE    \n       if ( x*rate &gt; 10 ) {      ## when x*rate is very large \n         return( -exp(-rate*x) ) ## use approximation: log(1-z) = -z, to avoid underflow\n       }\n       else {                            ## otherwise, \n         return( log(-expm1(-rate*x) ) ) ## use the exact formula\n      }\n    } else {          ## if log.p is FALSE\n       return( -expm1(-rate*x) ) ## use expm1() to avoid numerical issues\n    }\n  } else {                ## if lower.tail is FALSE\n    if ( log.p ) {        ## if log.p is TRUE\n       return( -rate*x )  ## the formula is simple\n    } else {              ## if log.p is FALSE\n       return( exp(-rate*x) ) ## the formula is still simple\n    }\n  }\n}\n</code></pre>"},{"location":"use_cases/example_assignment/#preparing-files-for-the-autograder","title":"Preparing Files for the Autograder","text":"<p>The autograder used by <code>autogradscoper</code> typically has the following structure of input files:</p> <pre><code>|-- setup.sh\n|-- run_autograder\n|-- config/\n| |-- config.yaml\n| |-- config.prob.yaml\n| `-- preload.baseonly.R\n|-- solution/\n| `-- [function_name].R \n`-- args/\n  |-- test.1.args\n  |-- test.2.args\n  |-- ...\n  `-- test.10.args\n</code></pre> <p>The <code>[function_name]</code> in this example is <code>mypexp</code>, because the students are expected to implement the <code>mypexp()</code> function in the <code>mypexp.R</code> file. </p> <p>These files can be found in the GitHub repository. We will explore the contents of each file one by one.</p>"},{"location":"use_cases/example_assignment/#setupsh","title":"setup.sh","text":"<p>The <code>setup.sh</code> file is a script that is used to build the Docker image for the autograder. It contains the commands to install necessary software tools and libraries based on a base image of Ubuntu 20.04. </p> <pre><code>#!/usr/bin/env bash\n\n## install python, R, git, and other necessary libraries.\napt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev\napt-get install -y python3 python3-pip python3-dev\napt-get install -y r-base\napt-get install -y git\n\n## create python virtual environment\npip3 install virtualenv\nvirtualenv /venv\nsource /venv/bin/activate\n\n## install autogradescoper from GitHub\ngit clone https://github.com/hyunminkang/autogradescoper.git\ncd autogradescoper\npip install -e .\n</code></pre>"},{"location":"use_cases/example_assignment/#run_autograder","title":"run_autograder","text":"<p>The <code>run_autograder</code> is a script that is used to run the autograder.  In <code>autogradescoper</code>, it simply runs the main <code>autogradescoper</code> command with specific arguments.  Everything else is handled by the configuration files and the input files.</p> <pre><code>#!/usr/bin/env bash\n\n## activate python virtual environment\nsource /venv/bin/activate\n\n## run autogradescoper\n## use --show-args and --show-details if you want to reveal input arguments and detailed output to students\nautogradescoper eval_r_func_probset --show-args --show-details --show-errors\n</code></pre>"},{"location":"use_cases/example_assignment/#configuration-files","title":"Configuration files","text":"<p>The <code>config/</code> directory contains the configuration files for the autograder.</p> <p>The <code>config/config.yaml</code> file contains the general configuration for the autograder, such as the name of the function to be evaluated and the name of the input arguments file.</p> <pre><code>## config/config.yaml - contains the general configuration for the autograder\n- func: \"mypexp\"      ## function to evaluate, e.g. mypexp() \n  filename: \"mypexp\"  ## submission file name, e.g. mypexp.R\n  digits: 8  ## number of digits to compare the output\n  config: /autograder/source/config/config.prob.yaml  ## problem-specific configuration\n  preload_usr: /autograder/source/config/preload.baseonly.R ## script to load before loading submission file\n# preload_sol: /autograder/source/config/preload.baseonly.R ## uncomment this line if you want to apply preload script in the solution file too\n</code></pre> <p>The <code>config/config.prob.yaml</code> file contains the problem-specific configuration for the autograder, such as the input argument for each test case and the time limit.</p> <pre><code>## config/config.prob.yaml - contains the problem-specific configuration for the autograder\n- args: /autograder/source/args/test.1.args\n  maxtime: 1\n- args: /autograder/source/args/test.2.args\n  maxtime: 1\n- args: /autograder/source/args/test.3.args\n  maxtime: 1\n- args: /autograder/source/args/test.4.args\n  maxtime: 1\n- args: /autograder/source/args/test.5.args\n  maxtime: 1\n- args: /autograder/source/args/test.6.args\n  maxtime: 1\n- args: /autograder/source/args/test.7.args\n  maxtime: 1\n- args: /autograder/source/args/test.8.args\n  maxtime: 1\n- args: /autograder/source/args/test.9.args\n  maxtime: 1\n- args: /autograder/source/args/test.10.args\n  maxtime: 1\n</code></pre> <p>The <code>config/preload.baseonly.R</code> file contains the R script that is loaded before the submission file. This file can be used in various purposes to limit the scope of students code to break the required conditions. For example, you can:</p> <ul> <li>Restrict students from using functions only from specific packages (e.g. <code>base</code> package)<ul> <li>For example, in case students are disallowed to use <code>lm()</code> function, for example, limiting the use of <code>stats</code> package can be a solution.</li> </ul> </li> <li>Restrict students from installing custom packages</li> <li>Restrict students from call functions from disallowed packages using <code>::</code> operators.</li> <li>Restrict students from setting the random seed arbitrarily. </li> <li>Define a wrapper function of the function to be implemented by students to check the correctness of implementation.</li> </ul> <p>In this example assignment, the  preload script restricts students from using any packages other than the <code>base</code> package.</p> <pre><code>## config/preload.baseonly.R - contains the R script to load before the submission file\n##\n## This function allows students to use only specific packages\ndetach_disallowed_packages &lt;- function(pkgnames) {\n  # Get the list of all attached packages\n  attached_packages &lt;- search()\n\n  # Keep only the base package + other essential packages\n  allowed_package &lt;- c(pkgnames,\"package:utils\", \".GlobalEnv\",\"Autoloads\")\n\n  # Identify packages that are not the base package\n  disallowed_packages &lt;- setdiff(attached_packages, allowed_package)\n\n  # Detach each disallowed package\n  for (pkg in disallowed_packages) {\n    try(detach(pkg, character.only = TRUE), silent = TRUE)\n  }\n}\n\n## allow only base package\ndetach_disallowed_packages(c(\"package:base\"))\n\n## Redefine library() function to prevent loading additional packages\nlibrary &lt;- function(...) {\n  stop(\"Loading additional packages is not allowed.\")\n}\n\n## Redefine require() function to prevent loading additional packages\nrequire &lt;- function(...) {\n  stop(\"Loading additional packages is not allowed.\")\n}\n\n## Redefine source() function to check a disallowed pattern in the submitted file\nsource &lt;- function(file) {\n  file_content &lt;- readLines(file)\n  # Check if the file contains \"::\" or \":::\"\n  contains_double_colon &lt;- any(grepl(\"::\", file_content))\n  contains_triple_colon &lt;- any(grepl(\":::\", file_content))\n\n  if ( contains_double_colon || contains_triple_colon ) {\n    stop(\"Use of :: or ::: is not allowed\")\n  }\n\n  expr &lt;- parse(file)\n  eval(expr, envir = globalenv())\n}\n\n## You may also redefine set.seed() function to prevent setting the random seed\n\n## You may also define a wrapper function to evaluate user's function in more specific way.\n## In this case, you need to specify the wrapper function as 'func' in the config.yaml file.\n</code></pre>"},{"location":"use_cases/example_assignment/#input-argument-files","title":"Input Argument Files","text":"<p>The input arguments for each test case are stored in the <code>args/</code> directory. Each line represents a single argument that is passed to the function to be evaluated. The number of arguments must match to the number of arguments used in the function to be evaluated.</p> <p>In this example assignment, the function <code>mypexp()</code> takes four arguments: <code>x</code>, <code>rate</code>, <code>lower.tail</code>, and <code>log.p</code>. Each argument must be specified in separate lines, in the format of <code>[type]:[value]</code> as in the following <code>args/test.1.args</code> file.</p> <pre><code>numeric:1 \nnumeric:10\nnumeric:TRUE\nnumeric:FALSE\n</code></pre> <p>Other than <code>numeric</code> types, you may also define <code>int</code>, <code>str</code>, <code>df</code> (for TSV), <code>rds</code> (for RDS), <code>eval</code> (for function). See Creating a New Assignment or the Full documentation to see more details.</p>"},{"location":"use_cases/example_assignment/#solution-file","title":"Solution File","text":"<p>The solution file contains the gold standard solution whose output used to compare output from the students' submissions. The instructors do not have to provide the expected output individually. Instead, the <code>autogradescoper</code> will run the solution file and student's submission file separately on the same input arguments, and compare the output to evaluate the correctness of the student's submission.</p> <p>In <code>mypexp()</code> example, the function should behave exactly the same as <code>pexp()</code> function. Therefore, the solution file <code>solution/mypexp.R</code> simply calls the <code>pexp()</code> function from the <code>stats</code> package.</p> <pre><code>## solution/mypexp.R - contains the solution file\nmypexp &lt;- function(x, rate, lower.tail, log.p) {\n  ## simply calls pexp() function from stats package\n  return(pexp(x, rate, lower.tail, log.p))\n}\n</code></pre> <p>Note that this is NOT a correct solution, because the students are disallowed to use the <code>stats</code> package in their submission.</p> <p>However, because the results of the function should exactly match to the behavior of <code>stats::pexp()</code> function, this will serve as a gold standard to compare the output with a submitted code.</p> <p>The students will not be able to use stats::pexp() in their submission because the preload script in the configuration prevents loading any functions outside the \"base\" package.</p> <p>The autograder will run both the solution and submission code for each test case and compare the output to check the correctness. </p>"},{"location":"use_cases/example_assignment/#creating-a-zip-file-for-autograder","title":"Creating a zip file for Autograder","text":"<p>To create a zip file for the autograder, you need to create a zip file that contains all the files and directories in the structure given previously:</p> <pre><code>|-- setup.sh\n|-- run_autograder\n|-- config/\n| |-- config.yaml\n| |-- config.prob.yaml\n| `-- preload.baseonly.R\n|-- solution/\n| `-- [function_name].R \n`-- args/\n  |-- test.1.args\n  |-- test.2.args\n  |-- ...\n  `-- test.10.args\n</code></pre> <p>It is important NOT to include the parent directory in the zip file. When compressed these files should NOT be contained in another directory. </p>"},{"location":"use_cases/example_assignment/#testing-the-example-assignment-in-gradescope","title":"Testing the Example Assignment in Gradescope.","text":"<p>Using this Autograder file, you can create your course, create your assignment, and test your assignment as described in the Quickstart page.</p>"},{"location":"use_cases/new_assignment/","title":"Use Case : Creating a New Assignment","text":""},{"location":"use_cases/new_assignment/#start-from-the-example-assignment","title":"Start from the example assignment","text":"<p>To create your own assignment, the easiest way is to start from the Example Assignment we used in the previous section.</p> <p>Below is the directory structure of the new example assignment. Each file is commented with the changes you may want to make for the new assignment. The specific changes to be made are described in the following sections.</p> <pre><code>|-- setup.sh                # no change needed (unless you need to install additional packages)\n|-- run_autograder          # no change needed (unless you want to change what students can view)\n|-- config/\n| |-- config.yaml           # change 'func' and 'filename' fields\n| |-- config.prob.yaml      # change 'maxtime' fields if needed\n| `-- preload.baseonly.R    # no change needed (unless you want to allow additional packages)\n|-- solution/\n| `-- [function_name].R     # change this to your solution\n`-- args/\n  |-- test.1.args           # change to the arguments you want to test\n  |-- test.2.args           # ...\n  |-- ...\n  `-- test.10.args\n</code></pre> <p>Note that these autograder source files will be located at <code>/autograder/source/</code> in the autograder container.</p>"},{"location":"use_cases/new_assignment/#setupsh","title":"setup.sh","text":"<p>Typically, you do not need to modify <code>setup.sh</code> file.  However, if you want to install additional R packages,  see the commented lines in the end of the example below.</p> <pre><code>#!/usr/bin/env bash\n\n## install python, R, git, and other necessary libraries.\napt-get install -y libxml2-dev libcurl4-openssl-dev libssl-dev\napt-get install -y python3 python3-pip python3-dev\napt-get install -y r-base\napt-get install -y git\n\n## create python virtual environment\npip3 install virtualenv\nvirtualenv /venv\nsource /venv/bin/activate\n\n## install autogradescoper from GitHub\ngit clone https://github.com/hyunminkang/autogradescoper.git\ncd autogradescoper\npip install -e .\n\n## NOTE: if you need to install additional R packages, add them here\n## Example command may look like this:\n## R -e 'install.packages(\"package_name\", repos=\"http://cran.r-project.org\")'\n</code></pre>"},{"location":"use_cases/new_assignment/#run_autograder","title":"run_autograder","text":"<p>The <code>run_autograder</code> simply runs the main <code>autogradescoper</code> command with specific arguments.</p> <p><pre><code>#!/usr/bin/env bash\n\n## activate python virtual environment\nsource /venv/bin/activate\n\n## run autogradescoper\n## use --show-args and --show-details if you want to reveal input arguments and detailed output to students\nautogradescoper eval_r_func_probset --show-args --show-details --show-errors\n</code></pre> Typically, you do not need to modify this file. However, you may want to selectively turn on the following arguments based on your needs (default of off):</p> <ul> <li><code>--show-args</code> : show the input arguments to the students.</li> <li><code>--show-details</code> : show the detailed output to the students.</li> <li><code>--show-errors</code> : show the error messages to the students.</li> </ul> <p>Typically, it is strongly recommended to turn on <code>--show-errors</code> to help students debug their code. Showing the detailed output (<code>--show-details</code>) and test arguments (<code>--show-args</code>) may help students understand their issues better, but it may allow students to take advantage of the test cases. Depending on the nature of the assignment, you may want to turn them off.</p> <p>Finally, there is a special option to turn on</p> <ul> <li><code>skip-solution</code> : skip running the solution code. see Custom Scoring Function section for more details. </li> </ul> <p>Note that this option requires to use Custom Scoring Function. The custom evaluation script must return the score and details in the output.</p>"},{"location":"use_cases/new_assignment/#configuration-files","title":"Configuration files","text":"<p>The <code>config/</code> directory contains the configuration files for the autograder.</p>"},{"location":"use_cases/new_assignment/#the-general-configuration-file","title":"The General Configuration File","text":"<p>You will need to modify the <code>config/config.yaml</code> file to specify the function to be evaluated and the filename of the submission file at the minimum. </p> <p>contains the general configuration for the autograder, such as the name of the function to be evaluated and the name of the input arguments file.</p> <pre><code>## config/config.yaml - contains the general configuration for the autograder\n- func: \"[replace_me]\"      ## change [replace_me] to the function to evaluate the code\n  filename: \"[replace_me]\"  ## change [replace_me] to the R filename of the submission file (excluding .R)\n  digits: [replace_me]      ## change [replace_me] to number of digits to compare the output\n# format: \"f\"               ## uncomment this line if you want to compare the output as a fixed floating point number\n  config: /autograder/source/config/config.prob.yaml  ## problem-specific configuration\n  preload_usr: /autograder/source/config/preload.baseonly.R  ## preload file for student submissions \n  preload_sol: /autograder/source/config/preload.baseonly.R  ## in most cases, you may want to use the same preload file for both submissions and solutions\n## NOTE: If you have multiple problems in the same assignment, you can add additional configurations here\n## Uncomment the following lines if you want to have multiple problems\n## - func: \"[func_name_prob2]\"     ## change [func_name_prob2] to the function to evaluate the code\n##   filename: \"[filename_prob2]\"  ## change [filename_prob2] to the R filename of the submission file (excluding .R)\n##   digits: 8  ## number of digits to compare the output\n##   config: /autograder/source/config/config.prob2.yaml  ## problem-specific configuration\n##   preload_usr: /autograder/source/config/preload.baseonly.R  ## you may use the same preload script or change it\n##   preload_sol: /autograder/source/config/preload.baseonly.R  \n</code></pre> <p>Here are some key considerations when modifying the <code>config/config.yaml</code> file:</p> <ul> <li>The name of the function to be evaluated should be typically the same as the function students are required to implement in the submission file. <ul> <li>For example, if the students are asked to implement a function named <code>mypexp()</code>, you should replace <code>[replace_me]</code> with <code>myexp()</code>. </li> <li>However, sometimes you may want to take the output of the function students implemented and pass it to another function for evaluation. </li> <li>For example, you may ask students to implement <code>my_estimator(data)</code> function and evaluate the estimator by simulating the data such as <code>my_evaluator(nreps, nsamples, param1, param2)</code> function. In this case, you should specify the function name as <code>my_evaluator</code> and provide arguments corresponding to <code>my_evaluator()</code>.</li> </ul> </li> <li>The file name students are required to submit should end with <code>.R</code>. <ul> <li>For example, if the students are asked to submit a file named <code>prob1.R</code>, you should replace <code>[replace_me]</code> with <code>prob1</code>.</li> </ul> </li> <li>The <code>digits</code> field specifies the number of digits to compare the output. <ul> <li>For example, if you want to compare the output up to 8 digits, you should replace <code>[replace_me]</code> with <code>8</code>.</li> </ul> </li> <li>The <code>format</code> field specifies the format of the output values to compare. <ul> <li>If you do not specify this value, the default format is <code>g</code>, which is typical way R prints out numeric values dynamic as scientific or fixed-point representation. </li> <li>If you want to compare the output as a fixed floating point number, you should uncomment the <code>format</code> line and set it to <code>\"f\"</code>. </li> <li>For example, when <code>digits</code> is 8 and the output value is <code>1.2345678e-07</code>, using <code>format: \"g\"</code> will compare the output as <code>1.2345678e-07</code>, while using <code>format: \"f\"</code> will compare the output as <code>0.00000012</code> (i.e. 8 digits below the decimal point).</li> <li>For example, if you want to force the output to be integer values, you may set when <code>digits</code> to be 0 and select <code>format: \"f\"</code>. This will use 0 digits below the decimal point. </li> </ul> </li> <li><code>preload_usr</code> specifies the preload script for student submissions, and <code>preload_sol</code> specifies the preload script for solutions.  <ul> <li>In most cases, you may want to use the same preload file for both submissions and solutions. </li> <li>If you want to use different preload files for submissions and solutions, you can specify different preload files for <code>preload_usr</code> and <code>preload_sol</code>.</li> <li>You may choose to skip specifying the preload script in  <code>preload_sol</code>.</li> </ul> </li> <li>If you want to have multiple problems in a single assignment, you can add additional configurations by uncommenting the lines after <code>## NOTE:</code>. </li> <li>You may add as many configurations as you need by repeating the lines starting with <code>- func:</code>.</li> </ul>"},{"location":"use_cases/new_assignment/#the-problem-specific-configuration-file","title":"The Problem-Specific Configuration File","text":"<p>The <code>config/config.prob.yaml</code> file contains the problem-specific configuration for the autograder. The YAML file should have a list of each test case, and each test case is typically considered to have 1 point. </p> <pre><code>## config/config.prob.yaml - contains the problem-specific configuration for the autograder\n- args: /autograder/source/args/test.1.args\n  maxtime: 1\n- args: /autograder/source/args/test.2.args\n  maxtime: 1\n- args: /autograder/source/args/test.3.args\n  maxtime: 1\n- args: /autograder/source/args/test.4.args\n  maxtime: 1\n- args: /autograder/source/args/test.5.args\n  maxtime: 1\n- args: /autograder/source/args/test.6.args\n  maxtime: 1\n- args: /autograder/source/args/test.7.args\n  maxtime: 1\n- args: /autograder/source/args/test.8.args\n  maxtime: 1\n- args: /autograder/source/args/test.9.args\n  maxtime: 1\n- args: /autograder/source/args/test.10.args\n  maxtime: 1\n</code></pre> <p>Each test case should have the following fields: - <code>args</code>: the path to the input arguments file for the test case. Typically you do not need to change this value. - <code>maxtime</code>: the maximum time allowed for the test case in seconds. You may need to change this value based on the complexity of the test case. - <code>maxscore</code>: (optional) the maximum score for the test case. If this is not set, the default value is 1. If you want to assign different points to different test cases, you can specify the <code>maxscore</code> field. Note that, if <code>maxscore</code> is not 1, you need to define your own evaluation function to return the score (see below for more detailed examples).</p>"},{"location":"use_cases/new_assignment/#the-preload-script","title":"The Preload Script","text":"<p>The preload script is an important script that loads necessary  R packages and functions before running the student's code. It contains the code to override some functions to help students conform their submissions to the requirements.</p> <p>The preload script has a large amount of flexibility in terms of what you can do.  Here we will break down into parts to explain the key components of the default preload script provided with the Example Assignment.  We will also provide additional examples on implementing custom evaluation functions, too.</p> <p>The following part of the preload script is to prevent students from using  disallowed packages and functions. If students are only allowed to use the <code>base</code> package, you can use the following code to detach all non-base packages.</p>"},{"location":"use_cases/new_assignment/#detaching-disallowed-packages","title":"Detaching Disallowed Packages","text":"<pre><code>## Part of the preload script to prevent users from using disallowed packages\ndetach_disallowed_packages &lt;- function(pkgnames) {\n  attached_packages &lt;- search()\n  allowed_package &lt;- c(pkgnames,\"package:utils\", \".GlobalEnv\",\"Autoloads\")\n  disallowed_packages &lt;- setdiff(attached_packages, allowed_package)\n  for (pkg in disallowed_packages) {\n    try(detach(pkg, character.only = TRUE), silent = TRUE)\n  }\n}\n\ndetach_disallowed_packages(c(\"package:base\"))\n</code></pre> <p>If you want to allow students to use <code>stats</code> packages, you may want to modify the last line to the following:</p> <pre><code>detach_disallowed_packages(c(\"package:base\", \"package:stats\"))\n</code></pre>"},{"location":"use_cases/new_assignment/#preventing-users-to-load-additional-packages","title":"Preventing Users to Load Additional Packages","text":"<p>The following code snipplet prevents students from  loading additional packages using <code>library()</code> or <code>require()</code> functions.</p> <pre><code>## Redefine library() function to prevent loading additional packages\nlibrary &lt;- function(...) {\n  stop(\"Loading additional packages is not allowed.\")\n}\n\n## Redefine require() function to prevent loading additional packages\nrequire &lt;- function(...) {\n  stop(\"Loading additional packages is not allowed.\")\n}\n</code></pre>"},{"location":"use_cases/new_assignment/#preventing-disallowed-patterns-of-use","title":"Preventing Disallowed Patterns of Use","text":"<p>Even if disallowed packages are detached, the students may still try to access the functions using <code>::</code> operator. For example, <code>stats::lm()</code> will still work even if the <code>stats</code> package is detached.</p> <p>To prevent such a loophole, we can scan a patterns of use of <code>::</code> or <code>:::</code> operators in the submission file before loading them. To do this, we can redefine the <code>source()</code> function in R as follows.</p> <pre><code>## Redefine source() function to check a disallowed pattern in the submitted file\nsource &lt;- function(file) {\n  file_content &lt;- readLines(file)\n  # Check if the file contains \"::\" or \":::\"\n  contains_double_colon &lt;- any(grepl(\"::\", file_content))\n  contains_triple_colon &lt;- any(grepl(\":::\", file_content))\n\n  if ( contains_double_colon || contains_triple_colon ) {\n    stop(\"Use of :: or ::: is not allowed\")\n  }\n\n  expr &lt;- parse(file)\n  eval(expr, envir = globalenv())\n}\n</code></pre> <p>The above code can be extended to detect more specific patterns.  For example, if certain expressions are required or disallowed in the student's submission, they can be added to the <code>source()</code> function above.</p>"},{"location":"use_cases/new_assignment/#fixing-random-seed","title":"Fixing Random Seed","text":"<p>For problems that require random number generation,  you may want to fix the random seed to make the results reproducible, and prevent students from using arbitrary random seeds. </p> <pre><code>## set a random seed\nset.seed(2024)\n## disable setting the random seed by users\nset.seed &lt;- function(seed) { \n    # do nothing\n}\n</code></pre>"},{"location":"use_cases/new_assignment/#custom-evaluation-function","title":"Custom Evaluation Function","text":"<p>Typically, the function students are asked to implement returns the output values that can be evaluated directly. However, sometimes you may want to evaluate the output values in a more specific way. In such cases, you can define a custom evaluation function in the preload script.</p> <p>For example, suppose that students are asked to implement a function <code>predict(data, coef)</code> that returns the predicted values. You may want to return the mean squared error (MSE) between the true values and the predicted values. In this case, you can define a custom evaluation function as follows:</p> <pre><code>## custom evaluation function for evaluating the output\nevaluate_predict &lt;- function(data, coef, true_values) {\n    predicted &lt;- predict(data, coef)\n    mse &lt;- mean((predicted - true_values)^2)\n    return(mse)\n}\n</code></pre> <p>In this case, the configuration file should have <code>evaluate_predict</code> as the function name, and  <code>predict</code> as the file name, asking students to submit <code>predict.R</code> that contains the <code>predict()</code> function as follows:</p> <pre><code>## example config/config.yaml\n- func: \"evaluate_predict\" \n  filename: \"predict\" \n  ...\n</code></pre>"},{"location":"use_cases/new_assignment/#custom-scoring-function","title":"Custom Scoring Function","text":"<p>By default, the autograder runs the solution and student's code, and compares the output values to determine the score. However, sometimes you may want to evaluate the output values in a more specific way and assign a score based on the evaluation. In such cases, you can define a custom scoring function in the preload script. </p> <p>NOTE that <code>--skip-solution</code> option must be turned on in the <code>run_autograder</code> script to skip running the solution code.</p> <p>In order to use this feature, your custom evaluation function should return a list that contains the following attributes:</p> <ul> <li><code>score</code>: the score for the test case</li> <li><code>details</code>: the output message to be shown to the students.</li> </ul> <p>For example, in the example above, you may want to score the test case based on the MSE between the true values and the predicted values quantitatively. In this case, you can define a custom scoring function as follows:</p> <pre><code>## custom evaluation function for evaluating the output\nevaluate_predict &lt;- function(data, coef, true_values) {\n    predicted &lt;- predict(data, coef)\n    mse &lt;- mean((predicted - true_values)^2)\n    score &lt;- 1 - mse / sum(true_values^2)\n    return(list(score = score, details = paste0(\"MSE = \", mse, \", Sum of True Values = \", sum(true_values^2))))\n}\n</code></pre> <p>If the score is not 0 to 1 scale, you will need to modify the <code>config/config.prob.yaml</code> file to include the <code>maxscore</code> field for each test case as follows:</p> <pre><code>## example config/config.prob.yaml \n- args: /autograder/source/args/test.1.args\n  maxtime: 10\n  maxscore: 2\n- args: /autograder/source/args/test.2.args\n  ...\n</code></pre>"},{"location":"use_cases/new_assignment/#specifying-input-arguments","title":"Specifying Input Arguments","text":"<p>The <code>args/</code> directory typically contains the input arguments for each test case. For each test case. <code>test.i.args</code> file contains the input arguments for the test case <code>i</code>. Each line of the file should contain the input arguments for the test case, in the format of <code>{type}:{value}</code> as follows:</p> <pre><code>numeric:1 \nnumeric:10\nnumeric:TRUE\nnumeric:FALSE\n</code></pre> <p>Sometimes, the input argument may contain a string. In this case, you can specify the input argument without quote as follows:</p> <pre><code>str:hello\nstr:world\n</code></pre> <p>If you want to pass a TSV file as an input to load as a dataframe, use <code>df</code> type as follows:</p> <pre><code>df:/autograder/source/args/test.1.tsv\n</code></pre> <p>Typically, locating the input files in the <code>args/</code> directory is recommended. The path should be specified with '/autograder/source/' prefix, as the input files are located at <code>/autograder/source/</code> in the autograder container.</p> <p>For other data types, such as matrix or other objects, it is recommended to use <code>rds</code> as follows</p> <pre><code>rds:/autograder/source/args/test.1.rds\n</code></pre> <p>The <code>rds</code> type is used to load the R object saved in the <code>.rds</code> file format. These files can be created using the <code>saveRDS()</code> function in R.  The autograder will load these arguments using the <code>readRDS()</code> function in R when evaluating the function with the input arguments.</p>"},{"location":"use_cases/new_assignment/#preparing-the-solution-files","title":"Preparing the Solution Files","text":"<p>The solution files are typically located in the <code>solution/</code> directory, with the filename specified in the <code>config/config.yaml</code> file. If you turn on <code>--skip-solution</code> option in the <code>run_autograder</code> script, the solution files will not be needed.</p>"},{"location":"use_cases/new_assignment/#debugging-the-autograder","title":"Debugging the Autograder","text":"<p>The Gradescope Autograder Documentation provides a detailed guide on setting up the Autograder. If you encounter any technical issues, this documentation provides a comprehensive details on the autograder setup.</p> <p>If the autograder does not behave as expected, typical way to debug the code is to run the autograder in the container and connect via SSH. See Gradescope Debugging via SSH. See also Additional Troubleshooting Tips for any other issues you may encounter.</p>"}]}